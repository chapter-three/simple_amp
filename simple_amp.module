<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeForm;
use Drupal\simple_amp\AmpBase;

/**
 * Implements hook_form_alter().
 */
function simple_amp_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  $user = \Drupal::currentUser();
  if ($form_object instanceof NodeForm && $user->hasPermission('individual simple amp')) {
    $amp = (new AmpBase())->setEntity($form_object->getEntity());
    if ($amp->isAmpEnabled()) {
      $form['amp'] = [
        '#type'        => 'details',
        '#title'       => t('AMP'),
        '#group'       => 'advanced',
        '#open'        => FALSE,
        '#weight'      => 100,
      ];
      $form['amp_disabled'] = [
        '#type'          => 'checkbox',
        '#title'         => t('Disable AMP version for this @bundle', ['@bundle' => $amp->getEntity()->bundle()]),
        '#default_value' => $amp->individualAmpDisabled(),
        '#group'         => 'amp',
      ];
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'simple_amp_form_submit';
        }
      }
    }
  }
}

/**
 * Save AMP individual node settings.
 */
function simple_amp_form_submit(array $form, FormStateInterface $form_state) {
  $amp = (new AmpBase())->setEntity($form_state->getFormObject()->getEntity());
  if (!empty($form_state->getValue('amp_disabled'))) {
    $amp->disableIndividualAmp()
      ->enableIndividualAmp();
  }
  else {
    $amp->disableIndividualAmp();
  }
}

/**
 * Implements hook_node_presave().
 */
function simple_amp_entity_delete(EntityInterface $entity) {
  (new AmpBase())->setEntity($entity)->disableIndividualAmp();
}

/**
 * Implements hook_page_attachments().
 */
function simple_amp_page_attachments(array &$page) {
  if ($entity = \Drupal::routeMatch()->getParameter('node')) {
    $amp = (new AmpBase())->setEntity($entity);
    if ($amp->isAmpEnabled() && !$amp->individualAmpDisabled()) {
      // Add path to AMP version of articles
      $amp_link = [
        '#tag'        => 'link',
        '#attributes' => [
          'rel'  => 'amphtml',
          'href' => $amp->generateAmpURL(),
        ],
      ];
      $page['#attached']['html_head'][] = [$amp_link, 'amp_link'];
    }
  }
}

/**
 * Implements hook_theme().
 */
function simple_amp_theme($existing, $type, $theme, $path) {
  return [
    'amp' => [
      'variables' => [
        'params'  => [],
        'title'   => NULL,
        'entity'  => NULL,
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function simple_amp_theme_suggestions_amp_alter(array &$suggestions, array $variables) {
  $entity = $variables['entity'];
  // Add template suggestions based on the entity type and entity bundle.
  $suggestions[] = 'amp__' . $entity->getEntityTypeId();
  $suggestions[] = 'amp__' . $entity->getEntityTypeId() . '__' . $entity->bundle();
}
